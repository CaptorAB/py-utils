name: test_all

permissions:
  contents: read
  actions: read

on:
  workflow_dispatch: {}

jobs:

  windows:
    runs-on: windows-latest

    defaults:
      run:
        shell: bash

    strategy:
      fail-fast: false
      matrix:
        python-version: [ '3.10', '3.11', '3.12', '3.13' ]

    steps:
      - name: Check out GitHub repository ${{ github.repository }}
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 1
          ref: ${{ github.sha }}
          persist-credentials: false

      - name: Set up Python on ${{ runner.os }}
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6.0.0
        with:
          python-version-file: '.python-version'

      - name: Get Python version
        run: echo "PYTHON_VERSION=$(python --version)" >> $GITHUB_ENV

      - name: Manage Poetry cache
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          path: |
            ~/AppData/Local/pypoetry/Cache/cache
            ~/AppData/Local/pypoetry/Cache/artifacts
          key: poetry-windows-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            poetry-windows-

      - name: Create virtual environment and install Poetry
        run: |
          python -m venv venv
          source venv/Scripts/activate
          python.exe -m pip install --upgrade pip wheel
          pip install poetry==2.2.1

      - name: Install dependencies with Poetry
        run: |
          source venv/Scripts/activate
          poetry install --no-root --with dev

      - name: Check and fix with Ruff
        run: |
          source venv/Scripts/activate
          poetry run ruff check . --fix --exit-non-zero-on-fix

      - name: Format with Ruff
        run: |
          source venv/Scripts/activate
          poetry run ruff format

      - name: Tests with Pytest
        id: pytest
        continue-on-error: true
        run: |
          source venv/Scripts/activate
          PYTHONPATH=${PWD} poetry run pytest -n auto \
            --dist loadscope \
            --cov=. \
            --cov-report=term \
            --cov-report=term-missing

      - name: Create GitHub issue on failure
        if: ${{ steps.pytest.outcome == 'failure' }}
        uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8.0.0
        with:
          script: |
            await github.rest.issues.create({
              owner: 'CaptorAB',
              repo: 'py-utils',
              title: `Tests failed on ${new Date().toDateString()}`,
              body: `See the full logs here: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}`,
            })

      - name: Fail job if tests failed
        if: ${{ steps.pytest.outcome == 'failure' }}
        run: exit 1

  ubuntu:
    needs: windows
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        python-version: [ '3.10', '3.11', '3.12', '3.13' ]

    steps:
      - name: Check out GitHub repository ${{ github.repository }}
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 1
          ref: ${{ github.sha }}
          persist-credentials: false

      - name: Set up Python on ${{ runner.os }}
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6.0.0
        with:
          python-version-file: '.python-version'

      - name: Get Python version
        run: echo "PYTHON_VERSION=$(python --version)" >> $GITHUB_ENV

      - name: Manage Poetry cache
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          path: |
            ~/.cache/pypoetry/cache
            ~/.cache/pypoetry/artifacts
          key: poetry-ubuntu-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            poetry-ubuntu-

      - name: Create virtual environment on ${{ env.PYTHON_VERSION }}
        run: python -m venv venv

      - name: Activate virtual environment and install Poetry
        run: |
          source venv/bin/activate
          python --version
          pip install --upgrade pip wheel
          pip install poetry==2.2.1

      - name: Install dependencies with Poetry
        run: |
          source venv/bin/activate
          poetry install --no-root --with dev

      - name: Check and fix with Ruff
        run: |
          source venv/bin/activate
          poetry run ruff check . --fix --exit-non-zero-on-fix

      - name: Format with Ruff
        run: |
          source venv/bin/activate
          poetry run ruff format

      - name: Tests with Pytest
        id: pytest
        continue-on-error: true
        run: |
          source venv/bin/activate
          PYTHONPATH=${PWD} poetry run pytest -n auto \
            --dist loadscope \
            --cov=. \
            --cov-report=term \
            --cov-report=term-missing

      - name: Create GitHub issue on failure
        if: ${{ steps.pytest.outcome == 'failure' }}
        uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8.0.0
        with:
          script: |
            await github.rest.issues.create({
              owner: 'CaptorAB',
              repo: 'py-utils',
              title: `Tests failed on ${new Date().toDateString()}`,
              body: `See the full logs here: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}`,
            })

      - name: Fail job if tests failed
        if: ${{ steps.pytest.outcome == 'failure' }}
        run: exit 1

  macos:
    needs: ubuntu
    runs-on: macos-latest

    strategy:
      fail-fast: false
      matrix:
        python-version: [ '3.10', '3.11', '3.12', '3.13' ]

    steps:
      - name: Check out GitHub repository ${{ github.repository }}
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 1
          ref: ${{ github.sha }}
          persist-credentials: false

      - name: Set up Python on ${{ runner.os }}
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6.0.0
        with:
          python-version-file: '.python-version'

      - name: Get Python version
        run: echo "PYTHON_VERSION=$(python --version)" >> $GITHUB_ENV

      - name: Manage Poetry cache
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          path: |
            ~/Library/Caches/pypoetry/cache
            ~/Library/Caches/pypoetry/artifacts
          key: poetry-macos-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            poetry-macos-

      - name: Create virtual environment on ${{ env.PYTHON_VERSION }}
        run: python -m venv venv

      - name: Activate virtual environment and install Poetry
        run: |
          source venv/bin/activate
          python --version
          pip install --upgrade pip wheel
          pip install poetry==2.2.1

      - name: Install dependencies with Poetry
        run: |
          source venv/bin/activate
          poetry install --no-root --with dev

      - name: Check and fix with Ruff
        run: |
          source venv/bin/activate
          poetry run ruff check . --fix --exit-non-zero-on-fix

      - name: Format with Ruff
        run: |
          source venv/bin/activate
          poetry run ruff format

      - name: Tests with Pytest
        id: pytest
        continue-on-error: true
        run: |
          source venv/bin/activate
          PYTHONPATH=${PWD} poetry run pytest -n auto \
            --dist loadscope \
            --cov=. \
            --cov-report=term \
            --cov-report=term-missing

      - name: Create GitHub issue on failure
        if: ${{ steps.pytest.outcome == 'failure' }}
        uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8.0.0
        with:
          script: |
            await github.rest.issues.create({
              owner: 'CaptorAB',
              repo: 'py-utils',
              title: `Tests failed on ${new Date().toDateString()}`,
              body: `See the full logs here: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}`,
            })

      - name: Fail job if tests failed
        if: ${{ steps.pytest.outcome == 'failure' }}
        run: exit 1
