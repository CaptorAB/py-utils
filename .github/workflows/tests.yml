name: tests

permissions:
  contents: read
  actions: read
  issues: write

on:
  workflow_dispatch: {}
  push:
    branches:
      - "*" # matches every branch that doesn't contain a '/'
      - "*/*" # matches every branch containing a single '/'
      - "**" # matches every branch

jobs:
  run_tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Check out GitHub repository ${{ github.repository }}
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 1
          ref: ${{ github.sha }}
          persist-credentials: false

      - name: Set up Python on ${{ runner.os }}
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6.0.0
        id: setup_python
        with:
          python-version-file: '.python-version'

      - name: Get Python version
        run: echo "PYTHON_VERSION=$(python --version)" >> $GITHUB_ENV

      - name: Manage Poetry cache
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        id: poetry-cache
        with:
          path: |
            ~/.cache/pypoetry/cache
            ~/.cache/pypoetry/artifacts
          key: poetry-cache-${{ runner.os }}-${{ hashFiles('poetry.lock') }}
          restore-keys: poetry-cache-${{ runner.os }}-

      - name: Create virtual environment on ${{ env.PYTHON_VERSION }}
        run: python -m venv venv

      - name: Activate virtual environment and install Poetry
        run: |
          source venv/bin/activate
          python --version
          pip install --upgrade pip wheel
          pip install poetry==2.2.1

      - name: Install dependencies with Poetry
        run: |
          source venv/bin/activate
          poetry install --no-root --with dev

      - name: Check and fix with Ruff
        run: |
          source venv/bin/activate
          poetry run ruff check . --fix --exit-non-zero-on-fix

      - name: Format with Ruff
        run: |
          source venv/bin/activate
          poetry run ruff format

      - name: Tests with Pytest
        id: pytest
        continue-on-error: true
        run: |
          source venv/bin/activate
          PYTHONPATH=${PWD} poetry run pytest -n auto \
            --dist loadscope \
            --cov=. \
            --cov-report=term \
            --cov-report=term-missing \
            --cov-report=xml \
            --junitxml=junit.xml

      - name: Create GitHub issue on failure
        if: ${{ steps.pytest.outcome == 'failure' }}
        uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8.0.0
        with:
          script: |
            await github.rest.issues.create({
              owner: 'CaptorAB',
              repo: 'py-utils',
              title: `Tests failed on ${new Date().toDateString()}`,
              body: `See the full logs here: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}`,
            })

      - name: Fail job if tests failed
        if: ${{ steps.pytest.outcome == 'failure' }}
        run: exit 1

      - name: Upload test results to Codecov
        if: ${{ github.ref_name == 'master' }}
        uses: codecov/test-results-action@47f89e9acb64b76debcd5ea40642d25a4adced9f # v1.1.1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: junit.xml
          verbose: true

      - name: Upload coverage to Codecov.io
        if: ${{ github.ref_name == 'master' }}
        uses: codecov/codecov-action@5a1091511ad55cbe89839c7260b706298ca349f7 # v5.5.1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: CaptorAB/py-utils
          verbose: true
